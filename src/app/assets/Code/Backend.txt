++++++++++++++++++++ server.js ++++++++++++++++++++

require('dotenv').config();

const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const { initializeDatabase, endDatabaseConnection } = require('./database/database');
const routes = require('./routes/routes'); // Importa el archivo de rutas

const app = express();
const port = 3001;

app.use(cors());
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

initializeDatabase((err) => {
  if (err) {
    console.error('Error inicializando la base de datos Feria_virtual: ', err);
    process.exit(1);
  } else {
    console.log('Base de datos inicializada correctamente');
    app.listen(port, () => {
      console.log(`Servidor Node.js corriendo en http://localhost:${port}`);
    });
  }
});

app.use('/api', routes);

process.on('SIGINT', () => {
  endDatabaseConnection((err) => {
    if (err) {
      console.error('Error cerrando la conexión a MySQL: ', err);
    } else {
      console.log('Conexión a MySQL cerrada');
      process.exit();
    }
  });
});



++++++++++++++++++++ routes.js ++++++++++++++++++++

const express = require('express');
const router = express.Router();
const { registerUser, loginUser } = require('../controllers/userController');
const { updateEmpresa } = require('../controllers/empresaController'); // Asegúrate de que esto esté correcto
const { getEmpresas, getEmpresaById } = require('../controllers/adminController');
const { getAllEvents } = require('../controllers/agendaController');
const { addInterest, getInterests, eliminarInteres } = require('../controllers/interesesController');
const { createVote, getAllVotes, getUserVote, verificarVoto, deleteVote } = require('../controllers/votacionController'); // Importa el controlador de votación
const { parseRequestBody } = require('../middlewares/middlewares');
const authenticateToken = require('../middlewares/authMiddleware');

router.get('/agenda', getAllEvents);

router.post('/register', parseRequestBody, registerUser);
router.post('/login', parseRequestBody, loginUser);

router.get('/protected', authenticateToken, (req, res) => {
  res.status(200).json({ message: 'Acceso concedido', user: req.user });
});

router.post('/actualizar-empresa', (req, res) => {
  const empresa = req.body;
  updateEmpresa(empresa, (err, data) => {
    if (err) {
      console.error('Error al actualizar la empresa:', err);
      return res.status(500).json({ message: 'Error al actualizar la empresa: ' + err.message });
    }
    console.log('Datos enviados al cliente:', data);
    res.status(200).json({ message: 'Empresa actualizada correctamente', data });
  });
});

router.get('/empresas', getEmpresas);
router.get('/empresa/:id', getEmpresaById);

router.post('/add-interest', authenticateToken, addInterest);
router.get('/relaciones/:empresa_id', authenticateToken, getInterests);


router.delete('/eliminar-interes' ,authenticateToken, eliminarInteres);

router.post('/voto', authenticateToken, createVote);       // Ruta para crear un voto
router.get('/votos', authenticateToken, getAllVotes);      // Ruta para obtener todos los votos
router.get('/voto/:usuario_id', authenticateToken, getUserVote); // Ruta para obtener el voto de un usuario
router.get('/verificar-voto', authenticateToken, verificarVoto);
router.delete('/voto', authenticateToken, deleteVote);     // Ruta para eliminar un voto

module.exports = router;



++++++++++++++++++++ database.js ++++++++++++++++++++

const mysql = require('mysql2');

const connection = mysql.createConnection({
  host: 'localhost',
  user: 'root',
  password: ''
});

const initializeDatabase = (callback) => {
  connection.connect(err => {
    if (err) {
      console.error('Error conectando a la base de datos: ' + err.stack);
      return callback(err);
    }
    console.log('Conectado a la base de datos con ID ' + connection.threadId);
    connection.query('CREATE DATABASE IF NOT EXISTS Feria_virtual', (err) => {
      if (err) {
        console.error('Error al crear la base de datos: ', err);
        return callback(err);
      }
      console.log('Base de datos creada o ya existe');
      connection.changeUser({ database: 'Feria_virtual' }, (err) => {
        if (err) {
          console.error('Error al cambiar de base de datos: ', err);
          return callback(err);
        }
        console.log('Conectado a la base de datos Feria_virtual');
        const queries = [
          `CREATE TABLE IF NOT EXISTS usuarios (
            id INT AUTO_INCREMENT PRIMARY KEY,
            email VARCHAR(255) NOT NULL UNIQUE,
            password VARCHAR(255) NOT NULL,
            rol INT NOT NULL CHECK (rol IN (1, 2, 3))
          )`,
          `CREATE TABLE IF NOT EXISTS empresas (
            id INT AUTO_INCREMENT PRIMARY KEY,
            usuario_id INT,
            nombre_empresa VARCHAR(255),
            web_url VARCHAR(2083),
            spot_url VARCHAR(2083),
            logo_url VARCHAR(2083),
            descripcion VARCHAR(5000),
            url_meet VARCHAR(2083),
            horario_meet TIME,
            entidad VARCHAR(500),
            FOREIGN KEY (usuario_id) REFERENCES usuarios(id)
          )`,
          `CREATE TABLE IF NOT EXISTS visitantes (
            id INT AUTO_INCREMENT PRIMARY KEY,
            usuario_id INT,
            entidad VARCHAR(500),
            FOREIGN KEY (usuario_id) REFERENCES usuarios(id)
          )`,
          `CREATE TABLE IF NOT EXISTS administradores (
            id INT AUTO_INCREMENT PRIMARY KEY,
            usuario_id INT,
            FOREIGN KEY (usuario_id) REFERENCES usuarios(id)
          )`,
          `CREATE TABLE IF NOT EXISTS agenda (
            id INT AUTO_INCREMENT PRIMARY KEY,
            horaI TIME NOT NULL,
            horaF TIME NOT NULL,
            descripcion VARCHAR(3000),
            detalles VARCHAR(3000)
          )`,
          `CREATE TABLE IF NOT EXISTS intereses (
            id INT AUTO_INCREMENT PRIMARY KEY,
            empresa_id INT NOT NULL,
            empresa_interesada_id INT NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (empresa_id) REFERENCES empresas(id),
            FOREIGN KEY (empresa_interesada_id) REFERENCES empresas(id)
          )`,
          `CREATE TABLE IF NOT EXISTS votaciones (
            id INT AUTO_INCREMENT PRIMARY KEY,
            usuario_id INT NOT NULL,
            empresa_id INT NOT NULL,
            voto TINYINT NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (usuario_id) REFERENCES usuarios(id),
            FOREIGN KEY (empresa_id) REFERENCES empresas(id)
          )`
        ];
        let completedQueries = 0;
        queries.forEach((query) => {
          connection.query(query, (err) => {
            if (err) {
              console.error('Error al crear la tabla: ', err);
              return callback(err);
            }
            completedQueries += 1;
            if (completedQueries === queries.length) {
              console.log('Tablas creadas o ya existen');
              callback(null);
            }
          });
        });
      });
    });
  });
};

const endDatabaseConnection = (callback) => {
  if (connection) {
    connection.end((err) => {
      if (err) {
        console.error('Error al cerrar la conexión a MySQL: ', err);
        return callback(err);
      }
      console.log('Conexión a MySQL cerrada');
      callback(null);
    });
  } else {
    callback(null);
  }
};

module.exports = {
  initializeDatabase,
  endDatabaseConnection,
  connection
};



++++++++++++++++++++ adminController.js ++++++++++++++++++++

const { connection } = require('../database/database');

const getEmpresas = (req, res) => {
  const query ='SELECT empresas. id, empresas.entidad, empresas.nombre_empresa, empresas.logo_url,empresas.web_url, empresas.descripcion, empresas.url_meet, empresas.horario_meet FROM empresas JOIN usuarios ON empresas.usuario_id = usuarios.id;';
  connection.query(query, (err, results) => {
    if (err) {
      console.error('Error al obtener empresas:', err);
      return res.status(500).json({ message: 'Error al obtener empresas' });
    }
    res.status(200).json(results);
  });
};

const getEmpresaById = (req, res) => {
  const empresaId = req.params.id;
  const query = 'SELECT empresas.id, empresas.entidad, empresas.nombre_empresa, empresas.logo_url, empresas.web_url, empresas.descripcion, empresas.url_meet, empresas.horario_meet FROM empresas JOIN usuarios ON empresas.usuario_id = usuarios.id WHERE empresas.id = ?';
  connection.query(query, [empresaId], (err, results) => {
    if (err) {
      console.error('Error al obtener la empresa:', err);
      return res.status(500).json({ message: 'Error al obtener la empresa' });
    }
    if (results.length === 0) {
      return res.status(404).json({ message: 'Empresa no encontrada' });
    }
    res.status(200).json(results[0]);
  });
};

module.exports = {
  getEmpresas,
  getEmpresaById,
};



++++++++++++++++++++ agendaController.js ++++++++++++++++++++

const { connection } = require('../database/database');

const getAllEvents = (req, res) => {
  const sql = 'SELECT * FROM agenda';
  connection.query(sql, (error, results) => {
    if (error) {
      console.error('Error al obtener la agenda:', error);
      return res.status(500).json({ error: 'Error al obtener la agenda' });
    }
    res.status(200).json(results);
  });
};

const getEventById = (req, res) => {
  const { id } = req.params;
  const sql = 'SELECT * FROM agenda WHERE id = ?';
  connection.query(sql, [id], (error, result) => {
    if (error) {
      console.error('Error al obtener el evento:', error);
      return res.status(500).json({ error: 'Error al obtener el evento' });
    }
    if (result.length === 0) {
      return res.status(404).json({ error: 'Evento no encontrado' });
    }
    res.status(200).json(result[0]);
  });
};

module.exports = {
  getAllEvents,
  getEventById
};



++++++++++++++++++++ empresaController.js ++++++++++++++++++++

const { connection } = require('../database/database');

const getEmpresaDataByUsuarioId = (usuario_id, callback) => {
  const query = `
    SELECT e.id AS empresa_id, e.nombre_empresa, e.web_url, e.spot_url, e.logo_url, e.descripcion, e.url_meet, e.horario_meet, e.entidad
    FROM usuarios u
    JOIN empresas e ON u.id = e.usuario_id
    WHERE u.id = ?
  `;
  console.log('Ejecutando consulta con usuario_id:', usuario_id);
  connection.query(query, [usuario_id], (err, results) => {
    if (err) {
      console.error('Error al obtener datos combinados: ', err);
      return callback(err);
    }
    console.log('Resultados de la consulta:', results);
    if (results.length > 0) {
      const data = results[0];
      console.log('Datos combinados encontrados:', data);
      return callback(null, data);
    } else {
      console.error('No se encontraron datos para el usuario_id:', usuario_id);
      return callback(new Error('Datos no encontrados'));
    }
  });
};

const updateEmpresa = (empresa, callback) => {
  const { id, nombre_empresa, web_url, spot_url, logo_url, descripcion, url_meet, horario_meet, entidad, usuario_id } = empresa;
  console.log('Datos recibidos para actualizar la empresa:', empresa);
  const updateQuery = `
    UPDATE empresas
    SET nombre_empresa = ?, web_url = ?, spot_url = ?, logo_url = ?, descripcion = ?, url_meet = ?, horario_meet = ?, entidad = ?
    WHERE id = ?
  `;
  connection.query(updateQuery, [nombre_empresa, web_url, spot_url, logo_url, descripcion, url_meet, horario_meet, entidad, id], (err) => {
    if (err) {
      console.error('Error al actualizar la empresa: ', err);
      return callback(err);
    }
    console.log('Empresa actualizada correctamente');
    getEmpresaDataByUsuarioId(usuario_id, (err, data) => {
      if (err) {
        console.error('Error al obtener datos combinados después de actualizar:', err);
        return callback(err);
      }
      console.log('Datos combinados después de la actualización:', data);
      return callback(null, data);
    });
  });
};

module.exports = {
  updateEmpresa,
  getEmpresaDataByUsuarioId,
};



++++++++++++++++++++ userController.js ++++++++++++++++++++

require('dotenv').config();
const { connection } = require('../database/database');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcrypt');

const JWT_SECRET = process.env.JWT_SECRET;
const JWT_EXPIRES_IN = process.env.JWT_EXPIRES_IN;

function registerUser(req, res) {
  console.log('Solicitud de registro recibida:', req.body);
  const { email, password, rol, nombre_empresa, web_url, spot_url, logo_url, descripcion, url_meet, horario_meet, entidad } = req.body;
  if (!email || !password || !rol) {
    return res.status(400).json({ message: 'Faltan campos obligatorios' });
  }
  bcrypt.hash(password, 10, (err, hash) => {
    if (err) {
      console.error('Error al hashear la contraseña:', err);
      return res.status(500).json({ message: 'Error al hashear la contraseña' });
    }
    const insertUserQuery = 'INSERT INTO usuarios (email, password, rol) VALUES (?, ?, ?)';
    connection.query(insertUserQuery, [email, hash, rol], (err, result) => {
      if (err) {
        if (err.code === 'ER_DUP_ENTRY') {
          console.error('Error: El correo electrónico ya está en uso');
          return res.status(400).json({ message: 'El correo electrónico ya está en uso' });
        }
        console.error('Error al registrar usuario en MySQL: ', err);
        return res.status(500).json({ message: 'Error al registrar usuario en el back' });
      }
      console.log('Usuario registrado en MySQL:', result);
      const userId = result.insertId;
      let insertRoleQuery;
      let roleParams;
      switch (parseInt(rol, 10)) {
        case 1: // Empresa
          insertRoleQuery = 'INSERT INTO empresas (usuario_id, nombre_empresa, web_url, spot_url, logo_url, descripcion, url_meet, horario_meet, entidad) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)';
          roleParams = [userId, nombre_empresa, web_url, spot_url, logo_url, descripcion, url_meet, horario_meet, entidad];
          break;
        case 2: // Visitante
          insertRoleQuery = 'INSERT INTO visitantes (usuario_id, entidad) VALUES (?, ?)';
          roleParams = [userId, entidad];
          break;
        case 3: // Administrador
          insertRoleQuery = 'INSERT INTO administradores (usuario_id) VALUES (?)';
          roleParams = [userId];
          break;
        default:
          console.error('Rol no válido:', rol);
          return res.status(400).json({ message: 'Rol no válido' });
      }
      connection.query(insertRoleQuery, roleParams, (err, result) => {
        if (err) {
          console.error('Error al registrar rol en MySQL: ', err);
          return res.status(500).json({ message: 'Error al registrar rol' });
        }
        console.log('Rol registrado en MySQL:', result);
        res.status(201).json({ message: 'Usuario registrado exitosamente con rol correspondiente' });
      });
    });
  });
}

function loginUser(req, res) {
  const { email, password } = req.body;
  console.log('Datos recibidos:', { email, password });
  if (!email || !password) {
    return res.status(400).json({ message: 'Faltan campos obligatorios' });
  }
  const query = 'SELECT * FROM usuarios WHERE email = ?';
  connection.query(query, [email], (err, results) => {
    if (err) {
      console.error('Error al consultar usuario en MySQL: ', err);
      return res.status(500).json({ message: 'Error al intentar iniciar sesión' });
    }
    if (results.length > 0) {
      const user = results[0];
      console.log('Usuario encontrado:', user);
      bcrypt.compare(password, user.password, (err, isMatch) => {
        if (err) {
          console.error('Error al comparar contraseñas:', err);
          return res.status(500).json({ message: 'Error al intentar iniciar sesión' });
        }
        if (isMatch) {
          console.log('Contraseña válida para usuario:', user);
          let empresaQuery = null;
          let empresaParams = [];
          if (user.rol === 1) {
            empresaQuery = 'SELECT * FROM empresas WHERE usuario_id = ?';
            empresaParams = [user.id];
          }
          if (empresaQuery) {
            connection.query(empresaQuery, empresaParams, (err, empresaResults) => {
              if (err) {
                console.error('Error al consultar empresa en MySQL: ', err);
                return res.status(500).json({ message: 'Error al intentar iniciar sesión' });
              }
              const empresa = empresaResults[0] || null;
              let redirigir = '';
              if (empresa) {
                const camposCompletos = empresa.entidad && empresa.url_meet && empresa.logo_url &&
                                         empresa.spot_url && empresa.descripcion && empresa.horario_meet &&
                                         empresa.web_url;
                if (camposCompletos) {
                  redirigir = 'feria';
                } else {
                  redirigir = 'empresa';
                }
              } else {
                redirigir = 'empresa';
              }
              const token = jwt.sign({ id: user.id, rol: user.rol }, JWT_SECRET, {
                expiresIn: JWT_EXPIRES_IN
              });
              res.status(200).json({
                message: 'Inicio de sesión exitoso',
                token: token,
                user: user,
                empresa: empresa,
                redirigir: redirigir
              });
            });
          } else {
            res.status(200).json({
              message: 'Inicio de sesión exitoso',
              token: jwt.sign({ id: user.id, rol: user.rol }, JWT_SECRET, {
                expiresIn: JWT_EXPIRES_IN
              }),
              user: user,
              empresa: null,
              redirigir: 'feria'
            });
          }
        } else {
          console.log('Contraseña inválida para usuario:', user);
          res.status(401).json({ message: 'Credenciales inválidas' });
        }
      });
    } else {
      console.log('Usuario no encontrado con el email:', email);
      res.status(404).json({ message: 'Usuario no encontrado' });
    }
  });
}

module.exports = {
  registerUser,
  loginUser,
};



++++++++++++++++++++ interesController.js ++++++++++++++++++++

const { connection } = require('../database/database');

const addInterest = (req, res) => {
  const { empresa_id, empresa_interesada_id } = req.body;
  if (!empresa_id || !empresa_interesada_id) {
    return res.status(400).json({ error: 'Se requieren los IDs de ambas empresas para agregar un interés.' });
  }
  const query = 'INSERT INTO intereses (empresa_id, empresa_interesada_id) VALUES (?, ?)';
  connection.query(query, [empresa_id, empresa_interesada_id], (err) => {
    if (err) {
      console.error('Error al agregar interés: ', err);
      return res.status(500).json({ error: 'Error al agregar interés' });
    }
    res.status(200).json({ message: 'Interés agregado exitosamente' });
  });
};

const getInterests = (req, res) => {
  const empresa_id = req.params.empresa_id;
  const queryCompras = 'SELECT * FROM intereses WHERE empresa_interesada_id = ?';
  const queryVentas = 'SELECT * FROM intereses WHERE empresa_id = ?';
  connection.query(queryCompras, [empresa_id], (err, compras) => {
    if (err) {
      console.error('Error al obtener relaciones de compra: ', err);
      return res.status(500).json({ error: 'Error al obtener relaciones de compra' });
    }
    connection.query(queryVentas, [empresa_id], (err, ventas) => {
      if (err) {
        console.error('Error al obtener relaciones de venta: ', err);
        return res.status(500).json({ error: 'Error al obtener relaciones de venta' });
      }
      res.status(200).json({ compras, ventas });
    });
  });
};

const eliminarInteres = (req, res) => {
  const empresa_id = req.query.empresaId;
  const empresa_interesada_id = req.query.empresaInteresadaId;

  if (!empresa_id || !empresa_interesada_id) {
    return res.status(400).json({ message: 'Datos insuficientes' });
  }

  const query = `
    DELETE FROM intereses
    WHERE empresa_id = ? AND empresa_interesada_id = ?;
  `;
  connection.query(query, [empresa_id, empresa_interesada_id], (err, result) => {
    if (err) {
      console.error('Error al eliminar interés:', err);
      return res.status(500).json({ message: 'Error al eliminar interés' });
    }
    if (result.affectedRows > 0) {
      res.status(200).json({ message: 'Interés eliminado exitosamente' });
    } else {
      res.status(404).json({ message: 'Relación de interés no encontrada' });
    }
  });
};

module.exports = {
  addInterest,
  getInterests,
  eliminarInteres,
};



++++++++++++++++++++ votacionController.js ++++++++++++++++++++

const { connection } = require('../database/database');

const createVote = (req, res) => {
    const { usuario_id, empresa_id, voto } = req.body;

    if (!usuario_id || !empresa_id || voto === undefined) {
        return res.status(400).json({ error: 'Datos insuficientes para registrar el voto.' });
    }

    const query = `
        INSERT INTO votaciones (usuario_id, empresa_id, voto)
        VALUES (?, ?, ?)
        ON DUPLICATE KEY UPDATE voto = ?;
    `;

    connection.query(query, [usuario_id, empresa_id, voto, voto], (err) => {
        if (err) {
        console.error('Error al registrar el voto: ', err);
        return res.status(500).json({ error: 'Error al registrar el voto' });
        }
        res.status(200).json({ message: 'Voto registrado exitosamente' });
    });
};

const getAllVotes = (req, res) => {
    const query = 'SELECT * FROM votaciones';
    
    connection.query(query, (err, results) => {
        if (err) {
        console.error('Error al obtener los votos: ', err);
        return res.status(500).json({ error: 'Error al obtener los votos' });
        }
        res.status(200).json(results);
    });
};

const getUserVote = (req, res) => {
    const usuario_id = req.params.usuario_id;

    const query = 'SELECT * FROM votaciones WHERE usuario_id = ?';
    
    connection.query(query, [usuario_id], (err, results) => {
        if (err) {
        console.error('Error al obtener el voto del usuario: ', err);
        return res.status(500).json({ error: 'Error al obtener el voto del usuario' });
        }
        res.status(200).json(results);
    });
};

const verificarVoto = (req, res) => {
    const { usuario_id, empresa_id } = req.query;

    if (!usuario_id || !empresa_id) {
        return res.status(400).json({ error: 'Datos insuficientes para verificar el voto.' });
    }

    const query = 'SELECT * FROM votaciones WHERE usuario_id = ? AND empresa_id = ?';

    connection.query(query, [usuario_id, empresa_id], (err, results) => {
        if (err) {
            console.error('Error al verificar el voto: ', err);
            return res.status(500).json({ error: 'Error al verificar el voto' });
        }
        if (results.length > 0) {
            res.status(200).json({ existe: true, voto: results[0] });
        } else {
            res.status(200).json({ existe: false });
        }
    });
};


const deleteVote = (req, res) => {
    const { usuario_id, empresa_id } = req.body; // Usa req.body para obtener los datos del cuerpo

    // Verifica que los campos necesarios estén presentes
    if (!usuario_id || !empresa_id) {
        return res.status(400).json({ message: 'Datos insuficientes para eliminar el voto' });
    }

    const query = 'DELETE FROM votaciones WHERE usuario_id = ? AND empresa_id = ?';

    connection.query(query, [usuario_id, empresa_id], (err, result) => {
        if (err) {
            console.error('Error al eliminar el voto: ', err);
            return res.status(500).json({ message: 'Error al eliminar el voto' });
        }
        if (result.affectedRows > 0) {
            res.status(200).json({ message: 'Voto eliminado exitosamente' });
        } else {
            res.status(404).json({ message: 'Voto no encontrado' });
        }
    });
};




module.exports = {
    createVote,
    getAllVotes,
    getUserVote,
    verificarVoto,
    deleteVote,
};



++++++++++++++++++++ authMiddleware.js ++++++++++++++++++++

const jwt = require('jsonwebtoken');
const JWT_SECRET = process.env.JWT_SECRET;

function authenticateToken(req, res, next) {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];
  if (token == null) return res.sendStatus(401);
  jwt.verify(token, JWT_SECRET, (err, user) => {
    if (err) return res.sendStatus(403);
    req.user = user;
    next();
  });
}

module.exports = authenticateToken;



++++++++++++++++++++ middlewares.js ++++++++++++++++++++

const bodyParser = require('body-parser');
const parseRequestBody = bodyParser.json();

const logRequestBody = (req, res, next) => {
  if (req.body) {
    console.log('Cuerpo de la solicitud:', req.body);
  }
  next();
};

module.exports = { parseRequestBody, logRequestBody };





















En los detalles de empresa tengo una serie de botones, entre ellos un botón de "Me interesa". Con este botón lo que hacemos es que cuando hay una empresa logueada, puede hacer click en él para crear una relación comercial. Entonces una empresa puede hacer click en el botón de "Me interesa" de muchas empresas y muchas empresas se pueden interesar en la nuestra.

Luego en el div de mis relaciones comerciales aparecerán las empresas a las que he dado "me interesa" y las empresas que se han interesado en mí. ¿Cómo deberíamos modificar el backend y el frontend para esta nueva funcionalidad?